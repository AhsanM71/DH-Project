import { useState } from "react"
import OpenAI from 'openai';
//import { RunStepsPage } from "openai/resources/beta/threads/runs/steps";

// Syntax for creating a component called ChatbotApp, and exporting it at the end of the file 
// to access it in the App.js file. 
const ChatbotApp = () => {
    // Creating an instance of the class OpenAI, storing the value of the API key to the property apiKey. 
    // the dangerouslyAllowBroswer propety apart of the OpenAI class basically means the code is running in a 
    //  browser environment. 
    const openai = new OpenAI({
        apiKey: process.env.REACT_APP_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true});
      
  // Creating 3 useState hooks, the first hook contains the prompt variable which stores user inputs as strings
  const [prompt, setPrompt] = useState("");
  const [ansArr, setAnsArr] = useState({});
  // The second hook contains the apiResponse variable which stores the bot's response to user input and
  // Stores it as a string
  const [apiResponse, setApiResponse] = useState("");
  // The last hook is there to track whether a request is in progress. 
  const [loading, setLoading] = useState(false);
  
  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    try {
        //console.log("hello");

        // The openai.chat.completions.create is a bulilt in method in the imported api which sends a message
        // with role system and the content is the user input.
        const healthUpdateReportTemplate = `I have this template:
\nPatient Health Update Report\n

  

\nDate: [Current Date]\n 

  

\n--------------------------------------------\n

  

\nPatient Information\n 

\n• Full Name: [Patient's Full Name]\n 

\n• Contact: [Patient's Contact Number], [Patient's Email]\n 

  

\n--------------------------------------------\n 

  

\nSummary of Symptoms and Well-being\n 

\n• Symptoms Reported: [List of symptoms as reported by the patient]\n 

\n• Well-being Score: [Patient's self-rated well-being score out of 5]\n 

\n• Notable Changes: [Any significant changes in symptoms or well-being score since the last report]\n 

  

\n--------------------------------------------\n 

  

\nMedication Adherence\n 

\n• Medications Taken: [List of medications and whether they were taken as prescribed]\n 

\n• Missed Medications: [Any medications that were missed]\n 

\n• Reported Side Effects: [Any side effects reported by the patient]\n 

  

\n--------------------------------------------\n 

  

\nAlert Level Determination\n 

\n• Urgency: [Assessed level of urgency: Low, Moderate, High]\n 

\n• Reason: [Reason for the assigned urgency level]\n 

  

\n--------------------------------------------\n 

  

\nSpecific Concerns\n 

\n• Patient Notes: [Any additional notes or concerns expressed by the patient]\n 

  

\n--------------------------------------------\n 

  

\nRecommended Action\n 

\n• High Urgency Cases (e.g., severe symptoms like chest pain, breathing difficulty):\n 

  \n- "Emergency Medical Attention Recommended. Immediate intervention may be necessary."\n 

\n• Moderate Urgency Cases (symptoms are concerning but not life-threatening):\n 

  \n- If symptoms are medically complex or acute: "Nurse Visit Recommended."\n 

  \n- If symptoms are related to ongoing care needs: "PSW Follow-Up Recommended."\n 

\n• Low Urgency Cases (mild symptoms or routine care):\n 

  \n- "PSW Monitoring Recommended. Regular care and observation."\n 

  

\n--------------------------------------------\n 

  

\nHistorical Data Comparison\n 

\n• Previous Symptoms: [Comparison with the previous report's symptoms, if available]\n 

\n• Previous Well-being Score: [Comparison with the previous report's well-being score]\n 

  

\n--------------------------------------------\n 

  

\nReport Generated by CareLink\n 

  

\n--------------------------------------------\n 

I have this sample patient report:`;

const question = `\nfill out the template exactly like how it's given from the above sample patient report but also output the results exactly like the template, use all the same - "dashes" and symbols?`;

const finishedPrompt = `Basic Information:\n Full Name: ${ansArr.name}\n Date of Birth: ${ansArr.dob}\n Gender: ${ansArr.gender}\n Email: ${ansArr.email}\n
Phone Number: ${ansArr.pNumber}\n Address: ${ansArr.address}\n PSW Contact Info: ${ansArr.pswContact}\n Nurse Contact Info: ${ansArr.nurseContact}\n
Medical History\n Medical Conditions: ${ansArr.conditions}\n Previous Surgeries: ${ansArr.prevSurgeries}\n
Allgeries: ${ansArr.allergies}\n Medication History\n Current Meds: ${ansArr.meds}\n Dosages/Frequencies: ${ansArr.dose}\n
Family Medical History:\n Chronic Illness: ${ansArr.famHistory}\n Social History\n Job/Work Enviornment: ${ansArr.job}\n
Alchol Consumption: ${ansArr.alcohol}\n Recreational Drug Use: ${ansArr.drugs}\n Lifestyle Factors\n diets/nutrition: ${ansArr.diet}\n
Physical Activity: ${ansArr.exercise}\n Sleep Patterns: ${ansArr.sleep}\n Symptom Check\n ${ansArr.symptomCheck}\n
Well-being Score: ${ansArr.wbScore}\n Side Effects: ${ansArr.sideEff}\n General Health and Lifestyle: ${ansArr.generalH}\n
Additional Observations: ${ansArr.observe}\n Urgency of Care: ${ansArr.urgency}\n`;

const completePrompt = `${healthUpdateReportTemplate} + ${prompt} + ${question}`;  

console.log(completePrompt);     
const completion = await openai.chat.completions.create({
            messages: [{ role: "system", content: completePrompt }],
            // This is the model of the bot
            model: "gpt-3.5-turbo",
          });
        
      console.log(ansArr);
      // output the bot response from the the completion component and store it in the ApiResponse state
      let message = completion.choices[0].message.content;
      console.log(message);
      setApiResponse(message);
    } catch (e) {
      console.log(e);
      setApiResponse("Something is going wrong, Please try again.");
    }
    // Setting the loading set to false to indicate the response has been completed to the user request. 
    setLoading(false);
  };

  return (
    <>
      <div
        style={{
          display: "flex",
          justifyContent: "center",
          alignItems: "center",
        }}
      >
        <form className="form" onSubmit={handleSubmit}>

<h1>Patient Information</h1>
<h1>Basic Information</h1>
          <p>Full name</p>
          <textarea
            type="text"
            value={ansArr.name}
            placeholder="Enter your full name"
            onChange={(e) => {
              setAnsArr({...ansArr, name: e.target.value});
            }}
          ></textarea>
          
          <p>Date of Birth</p>
          <textarea
            type="text"
            value={ansArr.dob}
            placeholder="Enter your date of birth"
            onChange={(e) => {
              setAnsArr({...ansArr, dob: e.target.value});
            }}
          ></textarea>

          <p>Gender</p>
          <textarea
            type="text"
            value={ansArr.gender}
            placeholder="Enter your gender"
            onChange={(e) => {
              setAnsArr({...ansArr, gender: e.target.value});
            }}
          ></textarea>

          <p>Email</p>
          <textarea
            type="text"
            value={ansArr.email}
            placeholder="Enter your email address"
            onChange={(e) => {
              setAnsArr({...ansArr, email: e.target.value});
            }}
          ></textarea>

          <p>Phone Number</p>
          <textarea
            type="text"
            value={ansArr.pNumber}
            placeholder="Enter your phone number"
            onChange={(e) => {
              setAnsArr({...ansArr, pNumber: e.target.value});
            }}
          ></textarea>

          <p>Address</p>
          <textarea
            type="text"
            value={ansArr.address}
            placeholder="Enter your address"
            onChange={(e) => {
              setAnsArr({...ansArr, address: e.target.value});
            }}
          ></textarea>

          <p>PSW Contacts Info</p>
          <textarea
            type="text"
            value={ansArr.pswContact}
            placeholder="Enter your PSW email address and phone number"
            onChange={(e) => {
              setAnsArr({...ansArr, pswContact: e.target.value});
            }}
          ></textarea>

          <p>Nurse Contacts Info</p>
          <textarea
            type="text"
            value={ansArr.nurseContact}
            placeholder="Enter your Nurse email address and phone number"
            onChange={(e) => {
              setAnsArr({...ansArr, nurseContact: e.target.value});
            }}
          ></textarea>

<h1>Medical History</h1>
          <p>Medical conditions</p>
          <textarea
            type="text"
            value={ansArr.conditions}
            placeholder="Enter any existing medical conditions (e.g. diabetes, hypertension, asthma)"
            onChange={(e) => {
              setAnsArr({...ansArr, conditions: e.target.value});
            }}
          ></textarea>

          <p>Previous Surgeries</p>
          <textarea
            type="text"
            value={ansArr.prevSurgeries}
            placeholder="Enter your previous surgeries or hospitalizations"
            onChange={(e) => {
              setAnsArr({...ansArr, prevSurgeries: e.target.value});
            }}
          ></textarea>

          <p>Allergies to Medications</p>
          <textarea
            type="text"
            value={ansArr.allergies}
            placeholder="Enter your allergies to medications or other substances"
            onChange={(e) => {
              setAnsArr({...ansArr, allergies: e.target.value});
            }}
          ></textarea>

<h1>Medication History</h1>
          <p>Current Medications</p>
          <textarea
            type="text"
            value={ansArr.meds}
            placeholder="Enter any current medications"
            onChange={(e) => {
              setAnsArr({...ansArr, meds: e.target.value});
            }}
          ></textarea>

          <p>Dosages/Frequencies</p>
          <textarea
            type="text"
            value={ansArr.dose}
            placeholder="Enter your medication dosages and frequencies"
            onChange={(e) => {
              setAnsArr({...ansArr, dose: e.target.value});
            }}
          ></textarea>

<h1>Family Medical History</h1>
          <p>Chronic Illness</p>
          <textarea
            type="text"
            value={ansArr.famHistory}
            placeholder="Enter your family medical history (e.g. heart disease, cancer, genetic conditions)"
            onChange={(e) => {
              setAnsArr({...ansArr, famHistory: e.target.value});
            }}
          ></textarea>

<h1>Social History</h1>
          <p>Occupation/Work Environment</p>
          <textarea
            type="text"
            value={ansArr.job}
            placeholder="Enter your occupation/work environment"
            onChange={(e) => {
              setAnsArr({...ansArr, job: e.target.value});
            }}
          ></textarea>

          <p>Alcohol Consumption</p>
          <textarea
            type="text"
            value={ansArr.alcohol}
            placeholder="Enter alcohol consumptions"
            onChange={(e) => {
              setAnsArr({...ansArr, alcohol: e.target.value});
            }}
          ></textarea>

          <p>Recreational Drug Use</p>
          <textarea
            type="text"
            value={ansArr.drugs}
            placeholder="Enter recreational drug use"
            onChange={(e) => {
              setAnsArr({...ansArr, drugs: e.target.value});
            }}
          ></textarea>


<h1>Lifestyle Factors</h1>
          <p>Diet/Nutritional Habits</p>
          <textarea
            type="text"
            value={ansArr.diet}
            placeholder="Enter your diet/nutritional habits"
            onChange={(e) => {
              setAnsArr({...ansArr, diet: e.target.value});
            }}
          ></textarea>

          <p>Exercise or Physical Activity</p>
          <textarea
            type="text"
            value={ansArr.exercise}
            placeholder="Enter your exercises or physical activity routines"
            onChange={(e) => {
              setAnsArr({...ansArr, exercise: e.target.value});
            }}
          ></textarea>

          <p>Sleep Patterns</p>
          <textarea
            type="text"
            value={ansArr.sleep}
            placeholder="Enter your sleep patterns"
            onChange={(e) => {
              setAnsArr({...ansArr, sleep: e.target.value});
            }}
          ></textarea>


<h1>Daily Survey</h1>
          <p>Symptom Check</p>
          <textarea
            type="text"
            value={ansArr.symptomCheck}
            placeholder="Are you experiencing any new or worsening symptoms today?"
            onChange={(e) => {
              setAnsArr({...ansArr, symptomCheck: e.target.value});
            }}
          ></textarea>
          
          <p>Well-being Score</p>
          <textarea
            type="text"
            value={ansArr.wbScore}
            placeholder="On a scale of 1 to 5, with 1 being very poor and 5 being excellent, how would you rate your overall well-being today?"
            onChange={(e) => {
              setAnsArr({...ansArr, wbScore: e.target.value});
            }}
          ></textarea>

          <p>Side Effects</p>
          <textarea
            type="text"
            value={ansArr.sideEff}
            placeholder="Are you experiencing any side effects from your medications? If yes, please describe them."
            onChange={(e) => {
              setAnsArr({...ansArr, sideEff: e.target.value});
            }}
          ></textarea>

          <p>General Health and Lifestyle</p>
          <textarea
            type="text"
            value={ansArr.generalH}
            placeholder="Have there been any changes in your diet, physical actibity, or sleep patterns that you would like to report?"
            onChange={(e) => {
              setAnsArr({...ansArr, generalH: e.target.value});
            }}
          ></textarea>

          <p>Additional Observation</p>
          <textarea
            type="text"
            value={ansArr.observe}
            placeholder="Do you have any other health concerns or notes you would like to add for today?"
            onChange={(e) => {
              setAnsArr({...ansArr, observe: e.target.value});
            }}
          ></textarea>

          <p>Urgency of Care</p>
          <textarea
            type="text"
            value={ansArr.urgency}
            placeholder="Do you feel there is an urgent need for medical attention today?"
            onChange={(e) => {
              setAnsArr({...ansArr, urgency: e.target.value});
            }}
          ></textarea>

          



          <button
            disabled={loading || prompt.length === 0}
            type="submit"
          >
            {loading ? "Generating..." : "Generate"}
          </button>
        </form>
      </div>
      {apiResponse && (
        <div
          style={{
            display: "flex",
            justifyContent: "center",
          }}
        >
          <p style={{
            maxWidth: "80vw",

          }}>
            <strong>API response:</strong>
            {apiResponse}
          </p>
                  </div>
      )}
    </>
  );
};


export default ChatbotApp;